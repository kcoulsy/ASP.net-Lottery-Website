Imports System.Data.OleDb
Public Class WebForm12
    Inherits System.Web.UI.Page

    Dim Draw As New Integer

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Dim dbConn As New OleDbConnection("Provider = Microsoft.ACE.OLEDB.12.0;Data Source=" & Server.MapPath("/App_Data/1428728.mdb"))
        dbConn.Open()
        If Session("ID") Is Nothing Then
            Response.Redirect("Home.aspx")
        Else
            Dim AdmSql As String
            AdmSql = "SELECT Admin FROM Users WHERE Users.ID = " & Session("ID")

            Dim dbCmd As New OleDbCommand(AdmSql, dbConn)

            Dim dbReader As OleDbDataReader = dbCmd.ExecuteReader()
            If dbReader.Read() Then
                If dbReader("Admin") = 1 Then

                Else

                    Response.Redirect("Home.aspx")
                End If
            End If
        End If


        Dim da As New OleDbDataAdapter("SELECT * FROM Entries WHERE DrawID=0", dbConn)
        Dim dt As New DataTable
        da.Fill(dt)
        GridView.DataSource = dt.DefaultView
        GridView.DataBind()
        dbConn.Close()
    End Sub

    Protected Sub Drawumbers_Click(sender As Object, e As EventArgs) Handles DrawNumbers.Click

        'The first thing that the Draw button will do is generate 4 random numbers. Then it will set Numbers 1-3 + Bonus labels.
        Dim r As New List(Of Integer)
        Dim rg As New Random
        Dim rn As Integer
        Dim InitialJackpot As Double = 0
        Dim CurrentPool As Double = 0

        Do
            rn = rg.Next(1, 10)
            If Not r.Contains(rn) Then
                r.Add(rn)
            End If
        Loop Until r.Count = 4
        NumbersShown.Visible = True
        Num1.Text = r(0).ToString
        Num2.Text = r(1).ToString
        Num3.Text = r(2).ToString
        Bonus.Text = r(3).ToString

        'Creating a connection to the database for all of the SQLs
        Dim dbConn As New OleDbConnection("Provider = Microsoft.ACE.OLEDB.12.0;Data Source=" & Server.MapPath("/App_Data/1428728.mdb"))
        dbConn.Open()

        'Create an sql that will input the generated numbers above along with the date and time of the button click(i.e. when it is drawn)
        Dim DrawSql As String
        DrawSql = "INSERT INTO Draws ([Num1],[Num2],[Num3],[Bonus],[DrawDate]) VALUES (" & Num1.Text & "," & Num2.Text & "," & Num3.Text & "," & Bonus.Text & ", Now())"
        Dim dbDrawCmd As New OleDbCommand(DrawSql, dbConn)
        dbDrawCmd.ExecuteNonQuery()

        'Now we need the DrawID, which is autogenerated, for the newly inputted draw.
        Dim SelectDrawSql As String
        SelectDrawSql = "SELECT TOP 1 DrawID FROM Draws WHERE Num1=" & Num1.Text & " AND Num2=" & Num2.Text & " AND Num3=" & Num3.Text & " AND Bonus=" & Bonus.Text & " ORDER BY DrawID Desc"
        Dim dbSelectDrawCmd As New OleDbCommand(SelectDrawSql, dbConn)
        Dim dbReader As OleDbDataReader = dbSelectDrawCmd.ExecuteReader()

        'Run the DataReader to get the value of the latest DrawID.
        If dbReader.Read() Then

            'Create a new SQL that will Update all of the entries to the current draw with the new DrawID.
            'This could have been done later in this script, however I have done it now as I needed to set the value of the variable Draw now.
            'So rather than creating a new DataReader Later, I just updated them now.
            Dim UpdateDrawSql As String = "UPDATE Entries SET DrawID = " & dbReader("DrawID") & " WHERE DrawID=0"
            Dim dbUpdateDrawCmd As New OleDbCommand(UpdateDrawSql, dbConn)
            dbUpdateDrawCmd.ExecuteNonQuery()
            Draw = dbReader("DrawID")
        End If

        'As we have updated all of the entries DrawID's, I've decided to update the GridView.
        'This will not make any difference to the user as it gets changed again later.
        Dim RefreshSql As String = "SELECT * FROM Entries WHERE DrawID=" & Draw
        Dim daRefA As New OleDbDataAdapter(RefreshSql, dbConn)
        Dim dtRefT As New DataTable
        daRefA.Fill(dtRefT)
        GridView.DataSource = dtRefT.DefaultView
        GridView.DataBind()

        'Removing the visibility of the Draw button, to prevent multiple clicks and it causing any bugs.
        DrawNumbers.Visible = False

        'I've created this variable TotalPrize. This will be a summed value of every Prize value given to each entry. 
        Dim TotalPrize As Integer = 0

        'A For loop that will loop through each entry to the current draw (=each row in the grid view)
        For i As Integer = 0 To GridView.Rows.Count - 1

            'For every entry we will generate a new variable points, then it will assign the points as in the assignment.
            'it starts at 0, adding 2 for each match with a number or adding 1 for matching the bonus.
            Dim Points As Integer = 0

            'Checking User entry number 1 with the draw numbers. Then assignming points
            If GridView.Rows(i).Cells(2).Text = Num1.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(2).Text = Num2.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(2).Text = Num3.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(2).Text = Bonus.Text Then
                Points = Points + 1
            End If

            'Checking User entry number 2 with the draw numbers.
            If GridView.Rows(i).Cells(3).Text = Num1.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(3).Text = Num2.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(3).Text = Num3.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(3).Text = Bonus.Text Then
                Points = Points + 1
            End If

            'Checking User entry number 3 with the draw numbers.
            If GridView.Rows(i).Cells(4).Text = Num1.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(4).Text = Num2.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(4).Text = Num3.Text Then
                Points = Points + 2
            ElseIf GridView.Rows(i).Cells(4).Text = Bonus.Text Then
                Points = Points + 1
            End If

            'If there are some points assigned then consider that they could have a prize, if Points = 0 then it won't bother.
            If Points > 0 Then

                'Prize assigned as in the assignment.
                'It works similar to above, default set to 0. Then it will be updated depending on the Points awarded.
                Dim Prize As Integer = 0

                If Points = 6 Then
                    Prize = 8
                ElseIf Points = 5 Then
                    Prize = 4
                ElseIf Points = 4 Then
                    Prize = 2
                ElseIf Points = 3 Then
                    Prize = 1
                Else
                    Prize = 0
                End If

                'The SQL that will update the Prize value of each entry.
                Dim UpdateDrawSql As String = "UPDATE Entries SET Prize=" & Prize & " WHERE UserID=" & GridView.Rows(i).Cells(1).Text & " AND DrawID=" & Draw & " AND PlayID=" & GridView.Rows(i).Cells(0).Text
                Dim dbUpdateDrawCmd As New OleDbCommand(UpdateDrawSql, dbConn)
                dbUpdateDrawCmd.ExecuteNonQuery()

                'We will also increase the TotalPrize from before the For Loop by the prize.
                'This way, Total Prize will be equal to the sum of all of the prizes.
                TotalPrize = TotalPrize + Prize

                'We will reset prize to 0 as a safety check for the next entry. It is no longer needed for this Entry.
                Prize = 0
            End If

            'Reseting Points as a safety check for the next entry. It is no longer needed for this Entry.
            Points = 0

        Next

        'So far we have:
        '   - Generated 4 Numbers and put them into the database.
        '   - Updated the Prize and DrawID of all of entrys

        'Now we need to find the size of the PrizePool so we can award the right winnings to each entry
        Dim FindPool As String = "SELECT Pool FROM PrizePool WHERE DrawID=" & Draw
        Dim FindPoolCmd As New OleDbCommand(FindPool, dbConn)
        Dim PoolReader As OleDbDataReader = FindPoolCmd.ExecuteReader

        If PoolReader.Read() Then
            CurrentPool = PoolReader("Pool")
        End If

        'Looping through the same grid view.
        For i As Integer = 0 To GridView.Rows.Count - 1

            'Get the Prize value for the Rows PlayID
            Dim SelectWinnings As String = "SELECT Prize From Entries Where PlayID=" & GridView.Rows(i).Cells(0).Text
            Dim SelectWinningsCmd As New OleDbCommand(SelectWinnings, dbConn)
            Dim SelectWinningsReader As OleDbDataReader = SelectWinningsCmd.ExecuteReader

            If SelectWinningsReader.Read() Then


                'If there is a prize value
                If SelectWinningsReader("Prize") > 0 Then

                    'Calculate the Winnings for the entry.
                    Dim EntryWinnings As Double = (SelectWinningsReader("Prize") / TotalPrize) * CurrentPool

                    'Get current balance so we can update it
                    Dim BalSql As String = "SELECT Balance FROM Users WHERE ID=" & GridView.Rows(i).Cells(1).Text
                    Dim dbBalCmd As New OleDbCommand(BalSql, dbConn)
                    Dim dbBalReader As OleDbDataReader = dbBalCmd.ExecuteReader()


                    While dbBalReader.Read()
                        'Create a variable for the New balance. Where it is the old balance + Winnings calculated by EntryWinnings
                        Dim NewBal As Double = dbBalReader("Balance") + Math.Round(EntryWinnings, 2)
                        'Update the database.
                        Dim UpdateBalSql As String = "UPDATE Users SET Balance=" & NewBal & " WHERE ID=" & GridView.Rows(i).Cells(1).Text
                        Dim dbUpdateBalCmd As New OleDbCommand(UpdateBalSql, dbConn)
                        dbUpdateBalCmd.ExecuteNonQuery()

                        'Create a transaction for the winning entry
                        Dim InsertTran As String = "INSERT INTO Transactions ([UserID],[Type],[Amount],[TransactionDate],[PlayID],[Balance]) VALUES (" & GridView.Rows(i).Cells(1).Text & ",'Ticket-Win'," & Math.Round(EntryWinnings, 2) & ",Now()," & GridView.Rows(i).Cells(0).Text & "," & NewBal & ")"
                        Dim TranCmd As New OleDbCommand(InsertTran, dbConn)
                        TranCmd.ExecuteNonQuery()
                    End While



                    'We need to get the TransactionID from this newly inserted transaction so we can cross connect the entry with transaction
                    Dim TranSel As String = "SELECT TransactionID FROM Transactions WHERE PlayID=" & GridView.Rows(i).Cells(0).Text
                    Dim TranSelCmd As New OleDbCommand(TranSel, dbConn)
                    Dim TranRead As OleDbDataReader = TranSelCmd.ExecuteReader

                    'When we have the TransactionID
                    If TranRead.Read() Then
                        'Update the entries to show the new TransactionID and the Winnings of the entry
                        Dim UpdateWinningsSql As String
                        UpdateWinningsSql = "UPDATE Entries SET Winnings=" & Math.Round(EntryWinnings, 2) & ", WinID=" & TranRead("TransactionID") & " WHERE UserID=" & GridView.Rows(i).Cells(1).Text & " AND DrawID=" & Draw & " AND PlayID=" & GridView.Rows(i).Cells(0).Text
                        Dim dbUpdateWinningsCmd As New OleDbCommand(UpdateWinningsSql, dbConn)
                        dbUpdateWinningsCmd.ExecuteNonQuery()
                    End If

                End If 'End of If there is a prize value
            End If ' End of select winnings reader

            'So for each row in the table we have:
            '   - Checked to see if there is a prize for the entry
            '   -If there is we update the users balance with the prize money
            '   - Create a Transaction and get its ID
            '   - Update the Entry (current row playID) with the winnings value and connect the TransactionID
        Next


        'Now we will update the grid view with the Newly updated winning entries.
        GridDetails.Text = "Winners:"
        Dim Refresh2Sql As String = "SELECT * FROM Entries WHERE DrawID=" & Draw & " AND Prize>0 " & " ORDER BY Prize DESC"

        Dim daRefA2 As New OleDbDataAdapter(Refresh2Sql, dbConn)
        Dim dtRefT2 As New DataTable
        daRefA2.Fill(dtRefT2)
        GridView.DataSource = dtRefT2.DefaultView
        GridView.DataBind()


        'Finally we need to prepare for the next draw. 
        ' We need to know what to start it at first.
        'So we get the values from the config file.
        Dim IJSQL As String = "SELECT InitialJackpot, RolloverAmount FROM Config WHERE ID=1"
        Dim InitialJackpotCmd As New OleDbCommand(IJSQL, dbConn)
        Dim IJReader As OleDbDataReader = InitialJackpotCmd.ExecuteReader
        If IJReader.Read() Then

            'If no winners then the amount is last draws + rollover amount
            If GridView.Rows.Count = 0 Then
                InitialJackpot = CurrentPool + IJReader("RolloverAmount")
            Else 'otherwise it is the InitialAmount in the config
                InitialJackpot = IJReader("InitialJackpot")
            End If


            'Create a new Prize Pool
            Dim NewGameSql As String
            NewGameSql = "INSERT INTO PrizePool ([DrawID],[GameStart],[Pool]) VALUES (" & (Draw + 1) & ", Now()," & InitialJackpot & ")"
            Dim dbNewGameCmd As New OleDbCommand(NewGameSql, dbConn)
            dbNewGameCmd.ExecuteNonQuery()

            'Update the Current Game in the config file.
            Dim ConfEdit As String
            ConfEdit = "UPDATE Config SET CurrentGame=" & (Draw + 1) & " WHERE ID=1"
            Dim dbConfEditCmd As New OleDbCommand(ConfEdit, dbConn)
            dbConfEditCmd.ExecuteNonQuery()

        End If
        dbConn.Close()
    End Sub

End Class